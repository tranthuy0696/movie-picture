name: Backend Continuous Deployment

on:
  # trigger event
  # workflow_dispatch: trigger event manually from github action
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "starter/backend/**"

env:
  PYTHON_VERSION: 3.11
  WORKING_DIR: "starter/backend"
  CLUSTER_NAME: "cluster"

jobs:
  lint:
    name: Run eslint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install pipenv
          pip install flake8
          pipenv install

      - name: Run eslint
        run: pipenv run lint

  test:
    name: Run test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          working-directory: ${{ env.WORKING_DIR }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install pipenv
          pip install flake8
          pipenv install

      - name: Run test
        run: pipenv run test

  build:
    name: Build application and push a docker image to ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          working-directory: ${{ env.WORKING_DIR }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/*.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          mask-aws-account-id: "no"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy build image to K8s
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          mask-aws-account-id: "no"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }}

      - name: Run init.sh
        run: |
          ./init.sh || true
        working-directory: ./setup

      - name: Replace Docker Image in deployment.yaml
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: fondend
          IMAGE_TAG: latest
        run: |
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ${{ env.WORKING_DIR}}/k8s

      - name: Apply Kubernetes resources
        run: |
          kustomize build | kubectl apply -f -
        working-directory: ${{ env.WORKING_DIR }}/k8s
